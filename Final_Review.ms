.so macros
.TL
Final Review
.AU
Donovan McCarthy
.AI 
University of Michigan Dearborn
.NH
Stuff on Exam
.RS
.BP
Linked List -> Not Done
.BP
UML ->Done
.BP 
OOP Concepts -> Done
.BP
stacks and queues -> Done 
.BP 
unit tests -> Watch lecture but pretty much good on this one 
.BP
Templates classes/structs/functions -> Review this on zyBooks 
.BP
Sorting -> Need to study 
.BP 
Ethics -> Ask what rubric we are going to use on the final 
.BP
Liked Lists -> Need to study 
.RE
.NH
UML
.RS
.BP
In UML '-' means private, '+' means public, '#' means protected
.BP
The first top box is the class name
.BP
The next boxes are either public, private, or protected
.BP
To show a class is derived from another you put an arrow from the child class to the parent class
.BP
The derived class only shows additional members 
.RE
.NH
OOP Concepts
.RS
.BP
1. Encapsulation, not giving things to you shouldnt have access to
.BP
2. Abstraction, You don't interact with all the interworkings of the class or object 
.BP
3.Polymorphism, using virtual you can redefine functions in the child classes  
.BP
You can make the virtual function pure virtual, which means the function must be defined in the child class 
.RE
.NH
Stacks and Queues
.RS
.BP
A stack is like a pile of paper V's a queue is like shopping line 
.BP
A queue is F.I.F.O
.BP
A stack is L.I.L.O
.BP 
To access the elements you have to get the next element then pop() it off to get to the next one
.BP
stack <Type> "Name";
.BP
queue <Type> "Name";
.RE
.NH
Linked list
.RS
.BP
Walk = setting current node to it's next node 
.RE
.NH
Templates
.RS
.BP
template<typename "name">, is how you declare a custom type
.BP
You can declare it above classes and functions, to have a custom type 
.BP 
for a class you can do: "Class Name"<type> "variable name"(values) 
.BP
 
.RE
.NH
Final notes
.RS
.BP 
4 programming questions(answer 3, get rid of worst one), essay style (ethics, UML)
.BP
.RE
